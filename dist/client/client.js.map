{"version":3,"file":"client.js","sources":["../../src/util/rectangle.ts","../../src/util/quadTree.ts","../../src/client/flocking.ts","../../src/client/instancedDots.ts","../../src/client/blendIn.ts","../../src/client/input.ts","../../src/client/client.ts"],"sourcesContent":["import { Vector2, Vector3 } from \"three\";\r\n\r\nexport class Rectangle {\r\n\r\n  constructor(public x: number, public y: number, public w: number, public h: number) { }\r\n\r\n  public contains(tX: number | Vector2 | Vector3, tY?: number) {\r\n    if (!(typeof tX === \"number\")) {\r\n      tY = tX.y;\r\n      tX = tX.x;\r\n    }\r\n    if (tY === undefined) {\r\n      throw new Error(\"no Y value\");\r\n    }\r\n    return tX >= this.x && tX <= this.x + this.w\r\n      && tY >= this.y && tY <= this.y + this.h;\r\n  }\r\n\r\n  public intersects(test: Rectangle) {\r\n    return this.x <= test.x + test.w &&\r\n      this.x + this.w >= test.x &&\r\n      this.y <= test.y + test.h &&\r\n      this.h + this.y >= test.y;\r\n  }\r\n}\r\n","import { Vector2 } from \"three\";\r\nimport { Rectangle } from \"./rectangle\";\r\n\r\ninterface Entry {\r\n  point: Vector2;\r\n}\r\n\r\nconst merge = (a: any[], b: any[]) => Array.prototype.push.apply(a, b);\r\n\r\nexport class QuadTree<T extends Entry> {\r\n  public content: T[] = [];\r\n\r\n  private split: boolean = false;\r\n  private subTree: Array<QuadTree<T>> = [];\r\n\r\n  constructor(public bounds: Rectangle, public thresh: number, private parent?: QuadTree<T>) { }\r\n\r\n  public validate(): T[] {\r\n    let removed: T[] = [];\r\n    this.evict(removed);\r\n    let root: QuadTree<T> = this;\r\n    while (root.parent !== undefined) {\r\n      root = root.parent;\r\n    }\r\n    removed = removed.filter((e) => !root.add(e));\r\n    root.balance();\r\n    return removed;\r\n  }\r\n\r\n  public balance() {\r\n    this.subTree.forEach((e) => e.balance());\r\n    if (!this.split) { return; }\r\n\r\n    const count = this.subTree.map((e) => e.content.length).reduce((a, b) => a + b, this.content.length);\r\n    if (count > this.thresh) { return; }\r\n\r\n    this.subTree.forEach((t) => merge(this.content, t.content));\r\n    this.subTree = [];\r\n    this.split = false;\r\n  }\r\n\r\n  private evict(evicted: T[]) {\r\n    merge(evicted, this.content.filter((e) => !this.bounds.contains(e.point)));\r\n    this.content = this.content.filter((e) => this.bounds.contains(e.point));\r\n    this.subTree.forEach((t) => t.evict(evicted));\r\n  }\r\n\r\n  public select(area: Rectangle): T[] {\r\n    const result: T[] = [];\r\n    if (!area.intersects(this.bounds)) {\r\n      return result;\r\n    }\r\n\r\n    this.content.filter((e) => area.contains(e.point)).forEach((e) => result.push(e));\r\n    this.subTree.map((tree) => tree.select(area)).forEach((e) => merge(result, e));\r\n\r\n    return result;\r\n  }\r\n\r\n  public size(): number {\r\n    return this.subTree.map((e) => e.size()).reduce((a, b) => a + b, this.content.length);\r\n  }\r\n\r\n  public add(item: T) {\r\n    if (!this.bounds.contains(item.point)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.content.length < this.thresh) {\r\n      this.content.push(item);\r\n      return true;\r\n    }\r\n\r\n    if (!this.split) {\r\n      this.subdivide();\r\n    }\r\n\r\n    for (const sub of this.subTree) {\r\n      if (sub.add(item)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private subdivide() {\r\n    if (this.split) { return; }\r\n    this.split = true;\r\n\r\n    const x = this.bounds.x;\r\n    const y = this.bounds.y;\r\n    const halfW = this.bounds.w / 2;\r\n    const halfH = this.bounds.h / 2;\r\n    this.subTree.push(new QuadTree<T>(new Rectangle(x, y, halfH, halfW), this.thresh, this));\r\n    this.subTree.push(new QuadTree<T>(new Rectangle(x + halfW, y, halfH, halfW), this.thresh, this));\r\n    this.subTree.push(new QuadTree<T>(new Rectangle(x + halfW, y + halfH, halfH, halfW), this.thresh, this));\r\n    this.subTree.push(new QuadTree<T>(new Rectangle(x, y + halfH, halfH, halfW), this.thresh, this));\r\n  }\r\n}\r\n","import { Vector2 } from \"three\";\r\nimport * as THREE from \"three\";\r\nimport { QuadTree } from \"util/quadTree\";\r\nimport { Rectangle } from \"util/rectangle\";\r\n\r\ninterface BoidMemory {\r\n  point: Vector2;\r\n  velocity: Vector2;\r\n  acceleration: Vector2;\r\n}\r\n\r\ninterface NearResult {\r\n  loc: { x: number, y: number };\r\n  boid: BoidMemory;\r\n  length: number;\r\n}\r\nconst sensorSize = 5;\r\nconst wantedSeparation = 1;\r\nconst neighborSize = 5;\r\nconst maxSpeed = .1;\r\nconst maxForce = .05;\r\n\r\nexport class Flocking {\r\n\r\n  private quadTree: QuadTree<BoidMemory>;\r\n  private boids: BoidMemory[];\r\n\r\n  private maxRot = Math.PI / 4;\r\n  private maxAccel = 0.1;\r\n\r\n  constructor(public worldSize: number) {\r\n    this.quadTree = new QuadTree(new Rectangle(0, 0, this.worldSize, this.worldSize), 4);\r\n    this.boids = [];\r\n  }\r\n\r\n  private randomAngle() {\r\n    return new THREE.Vector2(1, 0).rotateAround(new THREE.Vector2(0, 0), Math.random() * Math.PI * 2);\r\n  }\r\n\r\n  public add(point: Vector2) {\r\n    const b = {\r\n      point,\r\n      velocity: this.randomAngle(),\r\n      acceleration: this.randomAngle(),\r\n    };\r\n\r\n    this.boids.push(b);\r\n    const add = this.quadTree.add(b);\r\n  }\r\n\r\n  private findAvg(points: Array<{ x: number, y: number }>) {\r\n    const avg = points.reduce((a, b) => ({ x: a.x + b.x, y: a.y + b.y }), { x: 0, y: 0 });\r\n    avg.x /= points.length;\r\n    avg.y /= points.length;\r\n    return avg;\r\n  }\r\n\r\n  private sub<T extends { loc: { x: number, y: number } }>(b: BoidMemory) {\r\n    return (a: T) => {\r\n      a.loc.x -= b.point.x;\r\n      a.loc.y -= b.point.y;\r\n\r\n      return a;\r\n    };\r\n  }\r\n\r\n  private length(a: { x: number, y: number }) {\r\n    return Math.sqrt(a.x * a.x + a.y * a.y);\r\n  }\r\n\r\n  private addLength<T>(a: T & { loc: { x: number, y: number }, length?: number }): T & { length: number } {\r\n    a.length = this.length(a.loc);\r\n    return a as T & { length: number };\r\n  }\r\n\r\n  private separateDir(boid: BoidMemory, nearBy: NearResult[]) {\r\n    const result = new THREE.Vector2(0, 0);\r\n    if (nearBy.length === 0) { return result; }\r\n\r\n    const scratch = new THREE.Vector2(0, 0);\r\n\r\n    for (const n of nearBy) {\r\n      scratch.set(n.loc.x, n.loc.y);\r\n      scratch.normalize().divideScalar(n.length);\r\n      result.add(scratch);\r\n    }\r\n\r\n    result.normalize();\r\n    result.multiplyScalar(-maxSpeed);\r\n    result.clampLength(0, maxForce);\r\n\r\n    return result;\r\n  }\r\n\r\n  private alignDir(boid: BoidMemory, nearBy: NearResult[]) {\r\n    const result = new THREE.Vector2(0, 0);\r\n    if (nearBy.length === 0) { return result; }\r\n\r\n    nearBy.filter((p) => p.length < neighborSize).forEach((p) => result.add(p.boid.velocity));\r\n\r\n    result.normalize();\r\n    result.multiplyScalar(maxSpeed);\r\n    result.sub(boid.velocity);\r\n    result.clampLength(0, maxForce);\r\n    return result;\r\n  }\r\n\r\n  private cohesion(boid: BoidMemory, nearBy: NearResult[]) {\r\n    let result = new THREE.Vector2(0, 0);\r\n    if (nearBy.length === 0) { return result; }\r\n\r\n    const scratch = new THREE.Vector2(0, 0);\r\n    nearBy.forEach((e) => {\r\n      result.add(scratch.set(e.loc.x, e.loc.y));\r\n    });\r\n\r\n    result.divideScalar(nearBy.length);\r\n    result = this.seek(boid.point, boid.velocity, result);\r\n    return result;\r\n  }\r\n\r\n  public update(delta: number) {\r\n    const halfSize = sensorSize / 2;\r\n    const selectArea = new Rectangle(0, 0, sensorSize, sensorSize);\r\n\r\n    for (const boid of this.boids) {\r\n      selectArea.x = boid.point.x - halfSize;\r\n      selectArea.y = boid.point.y - halfSize;\r\n\r\n      const nearBy: NearResult[] = this.selectArea(selectArea)\r\n        .map(this.sub(boid))\r\n        .map((a) => this.addLength(a))\r\n        .filter((a) => a.length <= sensorSize && a.length !== 0);\r\n\r\n      const sepForce = this.separateDir(boid, nearBy.filter((a) => a.length < wantedSeparation));\r\n      sepForce.multiplyScalar(1.5);\r\n      const alignForce = this.alignDir(boid, nearBy);\r\n      const cohesionForce = this.cohesion(boid, nearBy);\r\n\r\n      boid.acceleration.add(sepForce);\r\n      boid.acceleration.add(alignForce);\r\n      boid.acceleration.add(cohesionForce);\r\n    }\r\n\r\n    this.apply(delta);\r\n\r\n    // rebuild quad tree after we've moved everything\r\n    const r = this.quadTree.validate();\r\n    for (const boid of r) {\r\n      this.quadTree.add(boid);\r\n    }\r\n  }\r\n\r\n  private hasNans(t: Vector2) {\r\n    return t.x !== t.x || t.y !== t.y;\r\n  }\r\n\r\n  public apply(delta: number) {\r\n    const scratch = new THREE.Vector2(0.1, 0.1);\r\n    for (const b of this.boids) {\r\n      b.velocity.add(b.acceleration.multiplyScalar(0.01));\r\n      b.acceleration.set(0, 0);\r\n      b.velocity.clampLength(0, maxSpeed);\r\n      b.point.add(b.velocity);\r\n      this.wrapBoid(b);\r\n    }\r\n  }\r\n\r\n  private seek(position: Vector2, velocity: Vector2, target: Vector2) {\r\n    const result = new THREE.Vector2();\r\n    result.copy(target);\r\n\r\n    result.normalize();\r\n    result.multiplyScalar(maxSpeed);\r\n    result.sub(velocity);\r\n    result.clampLength(0, maxForce);\r\n    return result;\r\n  }\r\n\r\n  public selectArea(selectArea: Rectangle) {\r\n    interface Wrapper { loc: { x: number, y: number }; boid: BoidMemory; }\r\n    const nearBy: Wrapper[] = [];\r\n    const merge = (target: Wrapper[], arr: Wrapper[]) => Array.prototype.push.apply(target, arr);\r\n    const origin = { x: selectArea.x, y: selectArea.y };\r\n    for (let i = -1; i <= 1; i++) {\r\n      for (let j = -1; j <= 1; j++) {\r\n        const offsetX = this.worldSize * i;\r\n        const offsetY = this.worldSize * j;\r\n        selectArea.x = origin.x + offsetX;\r\n        selectArea.y = origin.y + offsetY;\r\n        const rslt = this.quadTree.select(selectArea)\r\n          .map((b) => ({\r\n            loc: { x: b.point.x - offsetX, y: b.point.y - offsetY },\r\n            boid: b\r\n          }));\r\n        merge(nearBy, rslt);\r\n      }\r\n    }\r\n\r\n    return nearBy;\r\n  }\r\n\r\n  private wrapBoid(boid: BoidMemory) {\r\n    boid.point.x = this.wrap(boid.point.x, this.worldSize);\r\n    boid.point.y = this.wrap(boid.point.y, this.worldSize);\r\n\r\n  }\r\n\r\n  private wrap(x: number, max: number) {\r\n    if (x > max) {\r\n      return x % max;\r\n    }\r\n\r\n    if (x < 0) {\r\n      return max + (x % max);\r\n    }\r\n\r\n    return x;\r\n  }\r\n}\r\n","import {\r\n  BufferAttribute,\r\n  InstancedBufferAttribute,\r\n  InstancedBufferGeometry,\r\n  Material,\r\n  Mesh,\r\n  PlaneBufferGeometry,\r\n  PlaneGeometry,\r\n  Vector2,\r\n  Vector3\r\n} from \"three\";\r\nimport * as THREE from \"three\";\r\n\r\nconst loader = new THREE.FileLoader();\r\n\r\nlet fragSrc: string;\r\nlet vertSrc: string;\r\n\r\nloader.load(\"./shaders/dude.frag\", (d) => fragSrc = d);\r\nloader.load(\"./shaders/dude.vert\", (d) => vertSrc = d);\r\n\r\nconst asBuffer = (a: Array<Vector2 | Vector3>, size: number) => {\r\n  const ar = new Float32Array(size);\r\n  flatten(ar, a);\r\n  return ar;\r\n};\r\n\r\nconst flatten = (dest: Float32Array, a: Array<Vector2 | Vector3>) => {\r\n  if (a.length === 0) {\r\n    return dest;\r\n  }\r\n  const mapped: number[][] = a.map((v) => v.toArray());\r\n  const size = mapped[0].length;\r\n  for (let i = 0; i < mapped.length; i++) {\r\n    dest.set(mapped[i], i * size);\r\n  }\r\n  return dest;\r\n};\r\n\r\nexport class Dots {\r\n\r\n  private positions: Vector2[];\r\n  private positionBuffer: Float32Array;\r\n  private sizeOfPos = 2;\r\n\r\n  private color: Vector3[];\r\n  private colorBuffer: Float32Array;\r\n  private sizeOfColor = 3;\r\n\r\n  private bufferSize: number;\r\n  private currentSize: number = 0;\r\n\r\n  private geometry: InstancedBufferGeometry;\r\n  private material: Material;\r\n\r\n  private positionAttribute: InstancedBufferAttribute;\r\n  private colorAttribute: InstancedBufferAttribute;\r\n  private idAttribute: InstancedBufferAttribute;\r\n\r\n  private mesh: Mesh;\r\n\r\n  private scratchVector: Vector2 = new THREE.Vector2(0, 0);\r\n\r\n  public isPosDirty = true;\r\n  public isColorDirty = true;\r\n\r\n  private uniforms: { time: { value: number }, stime: { value: number } };\r\n\r\n  constructor(count: number) {\r\n    this.bufferSize = count;\r\n    this.positions = [];\r\n    this.positionBuffer = new Float32Array(count * this.sizeOfPos);\r\n    this.color = [];\r\n    this.colorBuffer = new Float32Array(count * this.sizeOfColor);\r\n    this.uniforms = { time: { value: 1.0 }, stime: { value: 1.0 } };\r\n    const base = new THREE.PlaneBufferGeometry(.5, .5, 1, 1);\r\n\r\n    this.geometry = new THREE.InstancedBufferGeometry();\r\n    this.geometry.maxInstancedCount = count;\r\n    this.geometry.index = base.index;\r\n    this.geometry.addAttribute(\"position\", base.getAttribute(\"position\"));\r\n    this.geometry.addAttribute(\"uv\", base.getAttribute(\"uv\"));\r\n\r\n    this.positionAttribute = new THREE.InstancedBufferAttribute(this.positionBuffer, this.sizeOfPos);\r\n    this.positionAttribute.setDynamic(true);\r\n\r\n    this.colorAttribute = new THREE.InstancedBufferAttribute(this.colorBuffer, this.sizeOfColor);\r\n    const ids: number[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n      ids.push(i);\r\n    }\r\n    this.idAttribute = new THREE.InstancedBufferAttribute(new Float32Array(ids), 1);\r\n    this.geometry.addAttribute(\"id\", this.idAttribute);\r\n    this.geometry.addAttribute(\"offset\", this.positionAttribute);\r\n    this.geometry.addAttribute(\"color\", this.colorAttribute);\r\n\r\n    this.material = new THREE.RawShaderMaterial({\r\n      uniforms: this.uniforms,\r\n      vertexShader: vertSrc,\r\n      fragmentShader: fragSrc\r\n    });\r\n\r\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\r\n  }\r\n\r\n  public getCurrentSize() {\r\n    return this.currentSize;\r\n  }\r\n\r\n  public getBufferSize() {\r\n    return this.bufferSize;\r\n  }\r\n\r\n  public getMesh() {\r\n    return this.mesh;\r\n  }\r\n\r\n  public add(x: number, y: number) {\r\n    this.positions.push(new THREE.Vector2(x, y));\r\n    this.color.push(new THREE.Vector3(Math.random(), Math.random(), Math.random()));\r\n\r\n    this.isPosDirty = true;\r\n    this.isColorDirty = true;\r\n  }\r\n\r\n  public delete(i: number) {\r\n    this.positions.splice(i, 1);\r\n    this.color.splice(i, 1);\r\n\r\n    this.isPosDirty = true;\r\n    this.isColorDirty = true;\r\n  }\r\n\r\n  public update(time: number) {\r\n    this.rebuild();\r\n  }\r\n\r\n  private rebuild() {\r\n    if (this.isColorDirty || this.isPosDirty) {\r\n      this.currentSize = this.positions.length;\r\n      this.geometry.maxInstancedCount = this.currentSize;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (this.isPosDirty) {\r\n      this.isPosDirty = false;\r\n      this.positionAttribute.setArray(flatten(this.positionBuffer, this.positions));\r\n      this.positionAttribute.needsUpdate = true;\r\n    }\r\n    if (this.isColorDirty) {\r\n      this.isColorDirty = false;\r\n      this.colorAttribute.setArray(flatten(this.colorBuffer, this.color));\r\n      this.colorAttribute.needsUpdate = true;\r\n    }\r\n\r\n  }\r\n\r\n  public updatePosition(i: number, x: number, y: number) {\r\n    this.positions[i].x = x;\r\n    this.positions[i].y = y;\r\n\r\n    this.isPosDirty = true;\r\n  }\r\n\r\n  public getPosition(i: number) {\r\n    return this.positions[i];\r\n  }\r\n\r\n  public addPosition(i: number, x: number, y: number) {\r\n    this.scratchVector.set(x, y);\r\n\r\n    this.positions[i].add(this.scratchVector);\r\n\r\n    this.isPosDirty = true;\r\n  }\r\n}\r\n","import * as KeyCodes from \"keycode-js\";\r\nimport { Camera, Mesh, Scene, Vector2 } from \"three\";\r\nimport * as THREE from \"three\";\r\nimport { QuadTree } from \"util/quadTree\";\r\nimport { Rectangle } from \"util/rectangle\";\r\nimport { Flocking } from \"./flocking\";\r\nimport { Input } from \"./input\";\r\nimport { Dots } from \"./instancedDots\";\r\n\r\nexport class BlendIn {\r\n  private dir: Vector2;\r\n  private speed: number;\r\n  private pTime: number | undefined;\r\n  private delta: number;\r\n\r\n  private duder: Dots;\r\n  private flock: Flocking;\r\n\r\n  private keyBinds: { [code: number]: () => void } = {};\r\n\r\n  constructor(private scene: Scene, private camera: Camera, private input: Input) {\r\n    this.dir = new THREE.Vector2(0, 0);\r\n    this.speed = 2;\r\n    this.delta = 0;\r\n\r\n    this.duder = new Dots(100);\r\n    this.flock = new Flocking(15);\r\n    // this.createBackground(15, 1);\r\n\r\n    const sqr = Math.floor(Math.sqrt(this.duder.getBufferSize()));\r\n    for (let i = 0; i < (sqr * sqr); i++) {\r\n      this.duder.add((i % sqr) * 0.5, Math.floor(i / sqr) * 0.5);\r\n      this.flock.add(this.duder.getPosition(i));\r\n    }\r\n\r\n    scene.add(this.duder.getMesh());\r\n\r\n    input.keyHandler = (code) => { if (this.keyBinds[code] !== undefined) { this.keyBinds[code](); } };\r\n\r\n    this.keyBinds[KeyCodes.KEY_SPACE] = () => this.flock.update(this.delta);\r\n  }\r\n\r\n  private createBackground(size: number, buffer: number) {\r\n    const g = new THREE.PlaneGeometry(size + buffer, size + buffer);\r\n    const m = new THREE.MeshBasicMaterial({ color: 0xffffff, side: THREE.DoubleSide });\r\n    const p = new THREE.Mesh(g, m);\r\n    p.position.z = -.01;\r\n    p.position.x = size / 2;\r\n    p.position.y = size / 2;\r\n    this.scene.add(p);\r\n  }\r\n\r\n  public createCube = () => {\r\n    this.duder.add(this.duder.getPosition(0).x, this.duder.getPosition(0).y);\r\n  }\r\n\r\n  public handleInput() {\r\n    this.dir.set(0, 0);\r\n    if (this.input.pressed[KeyCodes.KEY_W]) {\r\n      this.dir.y = 1;\r\n    }\r\n    if (this.input.pressed[KeyCodes.KEY_S]) {\r\n      this.dir.y = -1;\r\n    }\r\n    if (this.input.pressed[KeyCodes.KEY_A]) {\r\n      this.dir.x = -1;\r\n    }\r\n    if (this.input.pressed[KeyCodes.KEY_D]) {\r\n      this.dir.x = 1;\r\n    }\r\n\r\n    if (this.dir.x !== 0 || this.dir.y !== 0) {\r\n      this.dir.normalize();\r\n    }\r\n  }\r\n\r\n  public update(time: number) {\r\n    if (!this.pTime) {\r\n      this.pTime = time;\r\n      return;\r\n    }\r\n    this.delta = (time - this.pTime) / 1000;\r\n\r\n    this.flock.update(this.delta);\r\n    this.duder.isPosDirty = true;\r\n    this.duder.update(this.delta);\r\n\r\n    this.handleInput();\r\n\r\n    this.pTime = time;\r\n  }\r\n}\r\n","export class Input {\r\n    public pressed: { [code: number]: boolean | undefined } = {};\r\n\r\n    constructor() {\r\n        this.onKeyDown = (e: KeyboardEvent) => {\r\n            if (!this.pressed[e.keyCode]) {\r\n                this.keyHandler(e.keyCode);\r\n            }\r\n            this.pressed[e.keyCode] = true;\r\n        };\r\n        this.onKeyUp = (e: KeyboardEvent) => {\r\n            this.pressed[e.keyCode] = false;\r\n        };\r\n        this.contextMenu = (e: PointerEvent) => {\r\n            e.preventDefault();\r\n        };\r\n        this.dispose = () => {\r\n            document.removeEventListener(\"contextmenu\", this.contextMenu);\r\n            window.removeEventListener(\"keydown\", this.onKeyDown);\r\n            window.removeEventListener(\"keyup\", this.onKeyUp);\r\n        };\r\n\r\n        document.addEventListener(\"contextmenu\", this.contextMenu, false);\r\n        window.addEventListener(\"keydown\", this.onKeyDown, false);\r\n        window.addEventListener(\"keyup\", this.onKeyUp, false);\r\n    }\r\n\r\n    public dispose: () => void;\r\n\r\n    public onKeyDown(e: KeyboardEvent) {\r\n        if (!this.pressed[e.keyCode]) {\r\n            this.keyHandler(e.keyCode);\r\n        }\r\n        this.pressed[e.keyCode] = true;\r\n    }\r\n\r\n    public onKeyUp: (e: KeyboardEvent) => void;\r\n\r\n    public contextMenu: (e: PointerEvent) => void;\r\n\r\n    public keyHandler(key: number) {\r\n        //\r\n    }\r\n}\r\n","import * as Stats from \"stats.js\";\r\nimport * as THREE from \"three\";\r\nimport { Camera, OrbitControls, OrthographicCamera, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\r\nimport { BlendIn } from \"./blendIn\";\r\nimport { Input } from \"./input\";\r\nconst ortho = false;\r\nwindow.onload = function () {\r\n  let container: HTMLElement | null;\r\n  let camera: OrthographicCamera | PerspectiveCamera;\r\n  let controller: OrbitControls;\r\n  let scene: Scene;\r\n  let renderer: WebGLRenderer;\r\n  let input: Input;\r\n\r\n  let game: BlendIn;\r\n\r\n  const frustumSize = 160;\r\n  const SCREEN_WIDTH = window.innerWidth;\r\n  const SCREEN_HEIGHT = window.innerHeight;\r\n\r\n  const stats: Stats = new Stats();\r\n\r\n  init();\r\n  animate();\r\n\r\n  function init() {\r\n    container = document.getElementById(\"container\");\r\n    if (container === null) {\r\n      throw new Error(\"Failed to find container\");\r\n    }\r\n\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    if (ortho) {\r\n      camera = new THREE.OrthographicCamera(\r\n        frustumSize * aspect / - 2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / - 2, 1, 2000);\r\n    } else {\r\n      camera = new THREE.PerspectiveCamera(30, SCREEN_WIDTH / SCREEN_HEIGHT, 0.01, 10000);\r\n    }\r\n\r\n    scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0, 0, 0);\r\n\r\n    renderer = new THREE.WebGLRenderer();\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    controller = new THREE.OrbitControls(camera, renderer.domElement);\r\n    camera.position.set(0, 0, 50);\r\n    container.appendChild(renderer.domElement);\r\n\r\n    input = new Input();\r\n\r\n    onWindowResize();\r\n    window.addEventListener(\"resize\", onWindowResize, false);\r\n    container.appendChild(stats.dom);\r\n    game = new BlendIn(scene, camera, input);\r\n  }\r\n\r\n  function onWindowResize() {\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    if (isOrtho(camera)) {\r\n      camera.left = - frustumSize * aspect / 2;\r\n      camera.right = frustumSize * aspect / 2;\r\n      camera.top = frustumSize / 2;\r\n      camera.bottom = - frustumSize / 2;\r\n    }\r\n    if (isPers(camera)) {\r\n      camera.aspect = aspect;\r\n    }\r\n    camera.updateProjectionMatrix();\r\n\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  function isOrtho(cam: Camera): cam is OrthographicCamera {\r\n    return ortho;\r\n  }\r\n  function isPers(cam: Camera): cam is PerspectiveCamera {\r\n    return !ortho;\r\n  }\r\n  function animate(timestamp?: number) {\r\n    requestAnimationFrame(animate);\r\n    if (timestamp && !isNaN(timestamp)) {\r\n      game.update(timestamp);\r\n    }\r\n    renderer.render(scene, camera);\r\n\r\n    stats.update();\r\n  }\r\n\r\n};\r\n"],"names":["THREE.Vector2","THREE.FileLoader","THREE.PlaneBufferGeometry","THREE.InstancedBufferGeometry","THREE.InstancedBufferAttribute","THREE.RawShaderMaterial","THREE.Mesh","THREE.Vector3","KeyCodes.KEY_SPACE","THREE.PlaneGeometry","THREE.MeshBasicMaterial","THREE.DoubleSide","KeyCodes.KEY_W","KeyCodes.KEY_S","KeyCodes.KEY_A","KeyCodes.KEY_D","THREE.OrthographicCamera","THREE.PerspectiveCamera","THREE.Scene","THREE.Color","THREE.WebGLRenderer","THREE.OrbitControls"],"mappings":"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"}